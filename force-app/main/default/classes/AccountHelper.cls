/*
AccountHelper Overview

The `AccountHelper` class is designed to provide helper methods that assist in performing specific operations on Account records. 
This class is intended to modularize the logic used in the `AccountTrigger` to ensure separation of concerns, improve readability, and ease maintenance. 

This class is currently stubbed out. As part of this exercise, you are expected to:
1. Implement the method bodies to carry out the specified operations on Account records.
2. Refactor the `AccountTrigger` to utilize the methods provided in this `AccountHelper` class.

Methods:
- `setTypeProspect(SObject objects)`: 
    - Purpose: Update the 'Type' field of the given Account record to 'Prospect' if it's not already set.
    - Note: You'll likely need to adjust the method signature to accept the necessary parameters.

- `addressCopy()`: 
    - Purpose: Copy the shipping address of the Account to its billing address. 
    - Note: You'll likely need to adjust the method signature to accept the necessary parameters.

- `setRating`: 
    - Purpose: Evaluate certain conditions on the Account and assign a rating based on that evaluation. 
        You'll need to define the method's signature and implement its logic.

- `defaultContact`: 
    - Purpose: Create a default contact related to the Account after the Account is inserted. 
        You'll need to define the method's signature and implement its logic.

Remember:
Always ensure that your helper methods are bulk-safe to handle multiple records efficiently. 

* Author: Frank Larkin
*/
public with sharing class AccountHelper {

    // Part 1 - When an account is inserted change the account type to 'Prospect' if there is no value in the type field.
    
    public void setTypeProspect(Account acc){
        if (Trigger.isInsert) {
            if (acc.Type == null || acc.Type == '') {
                acc.Type = 'Prospect';
            }
        }
    }

    // Part 1 - When an account is inserted copy the shipping address to the billing address. 

    public void addressCopy(Account acc){
        if (Trigger.isInsert) {
            if (acc.ShippingStreet != null && acc.ShippingStreet != '') {
                acc.BillingStreet = acc.ShippingStreet;
            }
            if (acc.ShippingCity != null && acc.ShippingCity != '') {
                acc.BillingCity = acc.ShippingCity;
            }
            if (acc.ShippingState != null && acc.ShippingState != '') {
                acc.BillingState = acc.ShippingState;
            }
            if (acc.ShippingPostalCode != null && acc.ShippingPostalCode != '') {
                acc.BillingPostalCode = acc.ShippingPostalCode;
            }
            if (acc.ShippingCountry != null && acc.ShippingCountry != '') {
                acc.BillingCountry = acc.ShippingCountry;
            }

        }


    }

    // Part 1 - When an account is inserted set the rating to 'Hot' if the Phone, Website, and Fax is not empty.

    public void setAccountRating(Account acc){
        if (Trigger.isInsert) {
            if (acc.Phone != '' && acc.Website != '' && acc.Fax != '') {
                acc.Rating = 'Hot';
            }
        }
    }

    // Part 1 - When an account is inserted create a contact related to the account with the following default values:
    
    public void createContact(Account acc) {
        if (Trigger.isInsert && Trigger.isAfter) {
            Contact con = new Contact(
                AccountId = acc.Id,
                LastName = 'DefaultContact',
                Email = 'default@email.com'
            );
            insert con;
        }


    }
    
}
